-- phpMyAdmin SQL Dump
-- version 4.5.1
-- http://www.phpmyadmin.net
--
-- Хост: 127.0.0.1
-- Время создания: Сен 29 2016 г., 19:16
-- Версия сервера: 10.1.13-MariaDB
-- Версия PHP: 5.6.23

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- База данных: `cisite`
--

-- --------------------------------------------------------

--
-- Структура таблицы `ci_sessions`
--

CREATE TABLE `ci_sessions` (
  `session_id` varchar(40) NOT NULL DEFAULT '0',
  `ip_address` varchar(16) NOT NULL DEFAULT '0',
  `user_agent` varchar(50) NOT NULL,
  `last_activity` int(10) UNSIGNED NOT NULL DEFAULT '0',
  `user_data` text NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- --------------------------------------------------------

--
-- Структура таблицы `comments`
--

CREATE TABLE `comments` (
  `comment_id` int(6) NOT NULL,
  `material_id` int(6) NOT NULL,
  `author` varchar(100) NOT NULL,
  `comment_text` text NOT NULL,
  `date` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Дамп данных таблицы `comments`
--

INSERT INTO `comments` (`comment_id`, `material_id`, `author`, `comment_text`, `date`) VALUES
(1, 7, 'Егор', '<p>Круто</p>', '2016-09-22 21:00:00'),
(2, 7, 'Антон', '<p>Я в восторге</p>', '2016-09-22 21:00:00'),
(3, 3, 'Василий', '<p>Спасибо за эту статью</p>', '2016-09-22 21:00:00'),
(4, 6, 'Иван', '<p>Круто</p>', '2016-09-23 19:33:02');

-- --------------------------------------------------------

--
-- Структура таблицы `materials`
--

CREATE TABLE `materials` (
  `material_id` int(6) NOT NULL,
  `description` varchar(200) NOT NULL,
  `keywords` varchar(200) NOT NULL,
  `title` varchar(200) NOT NULL,
  `short_text` text NOT NULL,
  `main_text` text NOT NULL,
  `author` varchar(80) NOT NULL,
  `section0` varchar(30) NOT NULL,
  `section1` varchar(30) NOT NULL,
  `section2` varchar(30) NOT NULL,
  `section3` varchar(30) NOT NULL,
  `section4` varchar(30) NOT NULL,
  `small_img_url` varchar(200) NOT NULL,
  `count_views` int(8) NOT NULL DEFAULT '0',
  `date` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Дамп данных таблицы `materials`
--

INSERT INTO `materials` (`material_id`, `description`, `keywords`, `title`, `short_text`, `main_text`, `author`, `section0`, `section1`, `section2`, `section3`, `section4`, `small_img_url`, `count_views`, `date`) VALUES
(3, 'Что такое DOCTYPE?', 'DOCTYPE, что такое DOCTYPE, тип документа', 'Что такое DOCTYPE?', 'Существует множество причин, по которым веб-страница может отображаться некорректно: отсутствие необходимых закрывающих тэгов, неверно отформатированные таблицы, ошибки JavaScript, ошибки в CSS, некорректные запросы к серверу и т.д. Зачастую такие ошибки - следствие того, что разработчик просто не проверяет свою работу, не проводит валидацию кода. В других случаях ошибки - следствие недостатка знаний и опыта при разработке веб-страниц.', '<p>Существует множество причин, по которым веб-страница может отображаться некорректно: отсутствие необходимых закрывающих тэгов, неверно отформатированные таблицы, ошибки JavaScript, ошибки в CSS, некорректные запросы к серверу и т.д. Зачастую такие ошибки - следствие того, что разработчик просто не проверяет свою работу, не проводит валидацию кода. В других случаях ошибки - следствие недостатка знаний и опыта при разработке веб-страниц.\r\n</p>\r\n<p>Даже если вы сможете избежать все вышеперечисленные типы ошибок, есть еще кое-что, способное нарушить правильность отображения ваших страниц - это игнорирование использования тэга DOCTYPE или неправильное его использование.\r\n</p>\r\n<p>Значительное число веб-страниц не используют тэг DOCTYPE (забавно, что многие из таких сайтов - сайты веб-разработчиков или тех, кто обучает веб-разработке). Но это не важно. Важно то, что если вы хотите добиться корректного отображения во всех браузерах, использовать данный тэг совершенно необходимо. Кроме того, данный тэг обязателен, если вы хотите произвести валидацию (т.е. проверку корректности кода) вашей страницы.\r\n</p>\r\n<p><strong>Режимы работы браузеров\r\n</strong></p>\r\n<p>В современных браузерах используются два режима работы, один из которых призван обеспечить корректное отображение страниц, созданных под старые браузеры.\r\n</p>\r\n<p>В <strong>стандартном</strong> режиме работы браузер пытается следовать рекомендациям W3C (Консорциума Всемирной Паутины - организации, разрабатывающей и внедряющей технологические стандарты для сети Internet). Когда браузер переходит в режим <strong>"quirks"</strong> ("причудливый режим"), он пытается сымитировать работу старых версий браузеров. Это может привести к тому, что браузер будет игнорировать таблицы стилей и отображать страницу в непригодном для нормального восприятия виде.\r\n</p>\r\n<p><strong>Что это такое?\r\n</strong></p>\r\n<p>Объявление DOCTYPE - это специальная конструкция, которая сообщает браузеру, какая версия (X)HTML используется на данной странице, чтобы тот знал, как правильно отобразить документ. Объявление типа документа может также содержать ссылку на специальный текстовый файл (например, <a target = "_blank" href="http://www.w3.org/TR/html4/loose.dtd">loose DTD</a>) который используется браузером для получения необходимой ему информации для следования стандарту.\r\n</p>\r\n<p>Это можно сравнить с тем, как вы сдаете машину на доводку двигателя. Чтобы выполнить ее правильно, механику нужно знать производителя автомобиля, год выпуска, модель, объем двигателя, количество цилиндров, мощность и т.п. Зная эту информацию, можно начинать работу по доводке двигателя.\r\n</p>\r\n<p><strong>Спецификации\r\n</strong></p>\r\n<p>Спецификации W3C <a target = "_blank" href = "http://www.w3.org/TR/html4/struct/global.html#h-7.2">HTML 4.01</a> и <a target = "_blank" href = "http://www.w3.org/TR/xhtml1/#dtds">XHTML 1.0</a> утверждают о необходимости присутствия объявления типа документа DOCTYPE для каждой веб-страницы.\r\n</p>\r\n<p>Консорциум Всемирной Паутины устанавливает спецификации для протоколов обмена информации в сети. Это помогает добиться того, чтобы любой веб-сайт корректно отображался в программах со стороны пользователя - браузерах, просмотрщиках и других подобных программах. Технически нет никаких определенных правил, стандартов, в соответствии с которым и должна разрабатываться любая веб-страница. Есть только так называемые "спецификации", или, как их называет W3C - "рекомендации". Этих спецификаций, однако придерживаются все больше веб-разработчиков и создателей браузеров.\r\n</p>\r\n<p>Если вы придерживаетесь данных рекомендаций, то ваши страницы будут выглядеть правильно (за редким исключением) в большинстве браузеров. Если это не так, то проще разобраться с вопросом, если вы следуете рекомендациям, чем если вы используете какие-то нестандартные приемы кодирования, не отраженные в спецификациях.\r\n</p>\r\n<p>Если вы не следуете спецификациям, то вы постоянно будете вынуждены проверять, как выглядит ваш "нестандартный" сайт в каждом браузере, проверять это повторно при выходе каждой новой версии, надеясь, что все будет отображаться так, как вам того хотелось бы. Гораздо лучше действовать по стандартам, так как в конечном счете те редкие случаи, когда браузеры неправильно обрабатывают правильный код навсегда уйдут в прошлое, и вам не придется столь сильно волноваться за внешний вид вашего творения.\r\n</p>\r\n<p><strong>Применение\r\n</strong></p>\r\n<p>Объявление типа документа должно идти на странице в самом начале, еще до открытия тэга &lt;html&gt;. В этом случае, когда браузер доходит непосредственно до кода страницы, он уже знает, как правильно его обрабатывать.\r\n</p>\r\n<p>Есть три типа документов для HTML 4.01: Strict (Строгий), Transitional (Переходный), и Frameset (Если документ содержит фреймы). Тип Strict используется совместно с Каскадными Таблицами Стилей и помогает добиться "чистого" кодирования.\r\n</p>\r\n<pre>\r\n\r\n&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"&gt;\r\n\r\n</pre>\r\n\r\n<p>Тип Transitional используется когда элементы форматирования HTML могут включаться в сам HTML-документ, а не только в таблицу стилей.\r\n</p>\r\n<pre>\r\n\r\n&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;\r\n\r\n</pre>\r\n<p>Тип Frameset используется в документах, содержащих фреймы (редкость в наши дни).\r\n</p>\r\n<pre>\r\n\r\n&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Frameset//EN" "http://www.w3.org/TR/html4/frameset.dtd"&gt;\r\n\r\n</pre>\r\n\r\n<p>Три аналогичных типа документа существуют и для XHTML 1.0:\r\n</p>\r\n\r\n<pre>\r\n\r\n&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;\r\n\r\n&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;\r\n\r\n&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd"&gt;\r\n\r\n</pre>\r\n\r\n<p>Lee Underwood<br>\r\n<a target = "_blank" href= "http://www.webreference.com">webreference.com</a><br>\r\nПеревод - Дмитрий Науменко</p>', 'Антон Гудков', 'articles', 'html', '', '', '', 'http://localhost/ci/img/04_2010/12/doctype.jpg', 11, '2016-09-23 19:29:37'),
(4, 'Осваиваем CSS: макет страницы', 'css макет, шаблон css, дизайн css, блочная верстка, позиционирование', 'Осваиваем CSS: макет страницы', 'Одно из главных преимуществ CSS - возможность контролировать внешний вид страницы без использования тэгов оформления HTML. Однако, создание CSS-шаблонов незаслуженно получило репутацию чего-то сложного, особенно среди тех разработчиков, кто еще только осваивает данную технологию. Отчасти это связано с тем, что не все браузеры одинаково интерпретируют CSS, но еще больше - с тем фактом, что сейчас существует просто огромное количество разных техник создания макетов средствами таблиц стилей.', '<p>Одно из главных преимуществ CSS - возможность контролировать внешний вид страницы без использования тэгов оформления HTML. Однако, создание CSS-шаблонов незаслуженно получило репутацию чего-то сложного, особенно среди тех разработчиков, кто еще только осваивает данную технологию. Отчасти это связано с тем, что не все браузеры одинаково интерпретируют CSS, но еще больше - с тем фактом, что сейчас существует просто огромное количество разных техник создания макетов средствами таблиц стилей.\r\n</p>\r\n<p>Кажется, будто каждый веб-разработчик имеет свои собственные приемы и техники верстки CSS-шаблонов, и начинающие вебмастера зачастую используют какую-то технику даже не понимая, как она работает. Такой подход по типу "черного ящика" к использованию CSS помогает, конечно, получить результат быстро, но, в конечном счете мешает росту понимания языка разработчиком.\r\n</p>\r\n<p>Однако все эти различные техники имеют в своей основе три основных концепции: позиционирование, обтекание, манипулирование внешними отступами. Различные техники при ближайшем рассмотрении оказываются не такими уж и различными, и, если вы освоите основным понятия и концепции, то вам будет относительно легко создать ваш собственный CSS-шаблон страницы.\r\n</p>\r\n<p><strong>Центрирование дизайна\r\n</strong></p>\r\n<p>Длинные строки текста читать очень неудобно или даже трудно. По мере того, как мониторы и их разрешения продолжают расти, проблема удобочитаемости текста с экрана встает все острее. Один из способов справиться с данным вопросом - отцентровать содержание страницы. Вместо того, чтобы растягивать контент на всю ширину экрана, центрированные дизайны занимают только часть экрана, благодаря чему строки приобретает удобную для чтения длину.\r\n</p>\r\n<p>Страницы с центрацией контента сейчас широко распространены, поэтому изучение способов создания центрированного дизайна с помощью CSS - одна из первых вещей, которую хотят освоить начинающие веб-разработчики. Существует два основных способа центрации дизайна: в одном случае используются автоматические внешние отступы, в другом - позиционирование и отрицательные отступы.\r\n</p>\r\n\r\n<p><strong>Центрирование с использованием автоматических внешних отступов\r\n</strong></p>\r\n<p>Предположим, перед вами стоит типичная задача отцентровать по горизонтали контейнер div с id <em>wrapper</em> ("обертка").\r\n</p>\r\n<pre>\r\n&lt;body&gt;\r\n  &lt;div id="wrapper"&gt;\r\n  &lt;/div&gt;\r\n&lt;/body&gt;\r\n</pre>\r\n\r\n<p>Для осуществления этого на практике нужно просто задать ширину div <em>wrapper</em> и установить горизонтальные внешние отступы в значение <em>auto</em>.\r\n</p>\r\n<pre>\r\n#wrapper {\r\n  width: 720px;\r\n  margin: 0 auto;\r\n}\r\n</pre>\r\n\r\n<p>В данном примере ширина установлена в пикселях. Но, разумеется, с таким же успехом можно указать ее в процентах от ширины тела документа body, либо использовать размер в "em" относительно размера текста.\r\n</p>\r\n<p>Такой способ работает во всех современных браузерах, но не в IE 6. К счастью, IE неправильно интерпретирует свойство <em>text-align: center</em>, выравнивая по центру все, а не только текст. Вы можете использовать это себе во благо, центрируя все, что находится в тэге <em>body</em>, включая и div <em>wrapper</em>, переназначая затем выравнивание на <em>left</em> для содержимого блока <em>wrapper</em>.\r\n</p>\r\n<pre>\r\nbody {\r\n  text-align: center;\r\n}\r\n\r\n#wrapper {\r\n  width: 720px;\r\n  margin: 0 auto;\r\n  text-align: left;\r\n}\r\n</pre>\r\n\r\n<p>Использование свойства <em>text-align</em> подобным образом является по сути хаком, но он совсем безобиден и не окажет неблагоприятного воздействия на ваш код. Сейчас наш блок <em>wrapper</em> отцентрирован и в IE 6, точно так же, как и в других браузерах, которые лучше дружат со спецификацией.\r\n</p>\r\n\r\n\r\n<img style = "margin-left:10px" src = "http://localhost/ci/img/04_2010/19/1.jpg" alt = "">\r\n\r\n\r\n<p><strong>Центрирование дизайна с использованием позиционирования и отрицательных отступов\r\n</strong></p>\r\n<p>Метод с использованием автоматических внешних отступов - наиболее популярный подход, но при его использовании приходится прибегать к хаку. Также он требует стилевого оформления двух элементов вместо одного. Именно по этой причине многие предпочитаю использовать позиционирование и отрицательные отступы.\r\n</p>\r\n<p>Начинаем, как и в предыдущем примере - с установки ширины <em>wrapper</em>. Затем устанавливаем свойство <em>position</em> для <em>wrapper</em> в значение <em>relative</em> и свойство <em>left</em> в значение <em>50%</em>. Это позволяет нам  разместить левый край блока <em>wrapper</em> в центре страницы.\r\n</p>\r\n<pre>\r\n#wrapper {\r\n  width: 720px;\r\n  position: relative;\r\n  left: 50%;\r\n}\r\n</pre>\r\n\r\n<p>Нам, однако, нужно немного другое - мы хотим видеть в центре страницы центр блока <em>wrapper</em>. Добиться этого можно, применив отрицательный отступ с левой стороны блока <em>wrapper</em> равный половине ширины этого блока. Это сдвинет блок <em>wrapper</em> на половину его ширины влево, перемещая его в центр экрана:\r\n</p>\r\n\r\n<pre>\r\n#wrapper {\r\n  width: 720px;\r\n  position: relative;\r\n  left: 50%;\r\n  margin-left: -360px;\r\n}\r\n</pre>\r\n\r\n<p>Ваш выбор способа центрации зависит только от вашего вкуса. Однако, всегда полезно знать несколько способов и техник, так как нельзя угадать, что может вам пригодиться.\r\n</p>\r\n<p><strong>Шаблоны на основе обтекания\r\n</strong></p>\r\n<p>Существует несколько способов создания шаблонов средствами CSS, включая абсолютное позиционирование и отрицательные отступы. Я считаю наиболее простым в использовании метод, основанный на обтекании одних элементов другими. Как ясно из названия, в такого типа шаблонах вы просто устанавливаете ширину позиционируемых элементов, а затем задаете им обтекание слева или справа.\r\n</p>\r\n<p>Поскольку такие "обтекаемые" элементы больше не занимают никакого места в потоке документа, они не оказывают никакого влияния на окружающие их блочные элементы. Чтобы обойти такое поведение, вам нужно будет отменить обтекание на различных опорных точках вашего шаблона. Вместо того, чтобы последовательно применять обтекание и его отмену, удобнее использовать несколько другой подход: применять обтекание практически ко всему а затем отменять его один или два раза в "стратегических" точках документа, вроде футера.\r\n</p>\r\n<p><strong>Двухколоночный шаблон с использованием обтекания</strong>\r\n</p>\r\n<p>Для создания простого двухколоночного шаблона с использованием обтекания, начнем с базовой структуры (X)HTML. В нашем примере (X)HTML-каркас состоит из зон: branding, content, зоны для навигации и футера. Вся данная структура заключена в "обертку" - <em>wrapper</em>, который будет выровнен по горизонтали одним из описанных выше способов.\r\n</p>\r\n\r\n<pre>\r\n&lt;div id="wrapper"&gt;\r\n    &lt;div id="branding"&gt;\r\n    ...\r\n    &lt;/div&gt;\r\n    &lt;div id="content"&gt;\r\n    ...\r\n    &lt;/div&gt;\r\n    &lt;div id="mainNav"&gt;\r\n    ...\r\n    &lt;/div&gt;\r\n    &lt;div id="footer"&gt;\r\n    ...\r\n    &lt;/div&gt;\r\n&lt;/div&gt;\r\n</pre>\r\n\r\n<p>Главная навигация будет слева, а контент - с правой стороны. Однако в структуре страницы я поместил зону контента выше зоны навигации. Основная причина этого заключается в том, что содержание страницы наиболее важно и должно быть помещено в документе как можно выше, ближе к его началу.\r\n</p>\r\n<p>Обычно, когда люди создают шаблоны и использованием обтекания, они придают свойству <em>float</em> значение <em>left</em> для обеих колонок, после чего создают "поле" между колонками, используя свойства margin или padding. При использовании такого подхода колонки плотно прижаты в доступном им пространстве - так, что "не продохнуть". Обычно это не вызывает проблем, но некоторые браузеры разрушают такой "плотный" дизайн, при этом колонки выстраиваются в столбик - одна под другой.\r\n</p>\r\n<p>Это может происходить в IE, потому что в IE за основу берется "размер" контента, а не содержащего контент элемента. В браузерах, придерживающихся стандартов, если контент не помещается в блоке, он просто выходит за его пределы. В IE, однако, если контент не помещается в содержащем его элементе, то он "растягивает" элемент, увеличивая его в размере. Если подобная вещь происходит в плотном, зажатом дизайне, то у элементов больше не остается места, чтобы оставаться рядом друг с другом, и один из них как бы "проваливается", опускается ниже другого.\r\n</p>\r\n<p>Чтобы избежать подобного развития событий, старайтесь не переполнять блок, содержащий ваш дизайн с обтеканием. Вместо использования горизонтальных внешних и внутренних отступов, (margin, padding) вы можете создать "виртуальные поля" придавая одному блоку <em>float:left</em>, а другому - <em>float:right</em>.\r\n</p>\r\n<p>Сейчас, если один из элементов незначительно (в пределах нескольких пикселей)  увеличится в размерах, вместо того, чтобы разрушить весь дизайн, вытеснив один из блоков ниже другого, произойдет "наплывание" блока на территорию "виртуального поля".\r\n</p>\r\n\r\n<img style = "margin-left:10px" src = "http://localhost/ci/img/04_2010/19/2.jpg" alt = "">\r\n\r\n\r\n<p>Код CSS для достижения данной цели самоочевиден. Мы просто устанавливаем желаемую ширину для каждой из колонок, после чего указываем для навигации <em>float:left</em>, а для контента - <em>float:right</em>.\r\n</p>\r\n\r\n<pre>\r\n#content {\r\n  width: 520px;\r\n  float: right;\r\n}\r\n#mainNav {\r\n  width: 180px;\r\n  float: left;\r\n}\r\n</pre>\r\n\r\n<p>Затем, для того, чтобы корректно позиционировать футер под навигацией и контентом, для него нужно отменить обтекание.\r\n</p>\r\n\r\n<pre>\r\n#footer {\r\n  clear: both;\r\n}\r\n</pre>\r\n\r\n<p>Базовый вариант готов. Добавим еще пару штрихов. Внутренние отступы сверху и снизу для всего блока навигации и внутренние отступы слева и справа для списка пунктов в навигационном меню.\r\n</p>\r\n\r\n<pre>\r\n#mainNav {\r\n  padding-top: 20px;\r\n  padding-bottom: 20px;\r\n}\r\n#mainNav li {\r\n  padding-left: 20px;\r\n  padding-right: 20px;\r\n}\r\n</pre>\r\n\r\n<p>Проставим также отступ справа в зоне контента:\r\n</p>\r\n\r\n<pre>\r\n#content h1, h2, p {\r\n  padding-right: 20px;\r\n}\r\n</pre>\r\n\r\n<p>Вот и все, теперь у нас готов простой двухколоночный макет на CSS.\r\n</p>\r\n\r\n\r\n<img style = "margin-left:10px" src = "http://localhost/ci/img/04_2010/19/3.jpg" alt = "">\r\n\r\n\r\n<p><strong>Трехколоночный шаблон с использованием обтекания\r\n</strong></p>\r\n<p>HTML-каркас для построение трехколоночного шаблона очень похож на тот, что мы использовали с двухколоночным с той лишь разницей, что в нем появляются два дополнительных блока div: один для основного контента и еще один - для дополнительного.\r\n</p>\r\n\r\n<pre>\r\n&lt;div id="content"&gt;\r\n    &lt;div id="mainContent"&gt;\r\n    …\r\n    &lt;/div&gt;\r\n    &lt;div id="secondaryContent"&gt;\r\n    …\r\n    &lt;/div&gt;\r\n&lt;/div&gt;\r\n</pre>\r\n\r\n<p>Используя те же самые правила CSS, что и в случае двухколоночного шаблона, мы можем придать блоку основного контента <em>float:left</em>, а блоку дополнительного - <em>float:right</em>. Все это будет происходить внутри уже правильно спозиционированного основного блока content. Таким образом мы разделяем вторую колонку content на две, получая трехколоночный макет.\r\n</p>\r\n\r\n\r\n<img style = "margin-left:10px" src = "http://localhost/ci/img/04_2010/19/4.jpg" alt = "">\r\n\r\n\r\n<p>Как и раньше, CSS-код очень прост. Нужно просто указать желаемую ширину для каждого из блоков и задать каждому свое обтекание.\r\n</p>\r\n\r\n<pre>\r\n#mainContent {\r\n  width: 320px;\r\n  float: left;\r\n}\r\n\r\n#secondaryContent {\r\n  width: 180px;\r\n  float: right;\r\n}\r\n</pre>\r\n\r\n\r\n<p>Можно немного подчистить шаблон, удалив внутренний отступ из блока <em>content</em>, применив его непосредственно к контенту блока <em>secondaryContent</em>:\r\n</p>\r\n\r\n<pre>\r\n#secondaryContent h1, h2, p {\r\n  padding-left: 20px;\r\n  padding-right: 20px;\r\n}\r\n</pre>\r\n\r\n<p>Таким образом, мы получаем с вами вот такой симпатичный трехколоночный макет.\r\n</p>\r\n\r\n<img style = "margin-left:10px" src = "http://localhost/ci/img/04_2010/19/5.jpg" alt = "">\r\n\r\n\r\n\r\n<p>Andy Budd, Cameron Moll и Simon Collison: "CSS Mastery: Advanced Web Standards Solutions"<br />\r\n<a target = "_blank" href = "http://www.webreference.com">webreference.com</a><br />\r\nПеревод - Дмитрий Науменко</p>', 'Антон Гудков', 'articles', 'html', 'css', '', '', 'http://localhost/ci/img/04_2010/19/csslayout.jpg', 11, '2016-09-23 19:29:15'),
(5, 'Основы JavaScript - часть 1', 'Основы JavaScript, применение javascript', 'Основы JavaScript - часть 1', 'Javascript - это язык сценариев, который позволит вам использовать программирование для ваших веб-страниц.\r\nВы можете создать небольшую программу на Javascript - простой калькулятор или несложную игру.\r\nНо есть и более серьезные сферы применения данного языка.', '<p><strong>Введение\r\n</strong></p>\r\n<p>Javascript - это язык сценариев, который позволит вам использовать программирование для ваших веб-страниц.\r\n</p>\r\n<p>Вы можете создать небольшую программу на Javascript - простой калькулятор или несложную игру.\r\n</p>\r\n<p>Но есть и более серьезные сферы применения данного языка:\r\n</p>\r\n<p><em>- Определение браузера\r\n</em></p>\r\n<p>Определение того, каким веб-обозревателем пользуется посетитель вашего сайта. В зависимости от того, какой браузер он использует, может быть загружена страница, специально созданная "под" этот браузер.\r\n</p>\r\n<p><em>- Применение так называемых "Cookies"\r\n</em></p>\r\n<p>Сохранение информации на компьютере посетителя вашего сайта и последующее ее считывание в автоматическом режиме при повторном визите человека на ваш сайт. Данная технология называется "cookies".\r\n</p>\r\n<p><em>- Контроль браузера\r\n</em></p>\r\n<p>Открытие страниц в окнах, настроенных определенным образом, когда вы можете указать, будут ли отображаться кнопки навигации браузера, меню и строка состояния.\r\n</p>\r\n<p><em>- Валидация (проверка на соответствие определенным критериям) форм\r\n</em></p>\r\n<p>Проверка введенных в поля формы данных перед их отправкой. В качестве примера можно привести валидацию введенного адреса электронной почты: если в нем нет знака "@", то адрес не является корректным и не должен пройти проверку.\r\n</p>\r\n<p><strong>Где помещать Javascript-код?\r\n</strong></p>\r\n<p>Так как JavaScript - это не HTML, вам нужно указать браузеру, в каком месте страницы вы вставляете код JavaScript. Делается это с помощью тэга &lt;script&gt;.\r\n</p>\r\n<p>&lt;script type="text/javascript"&gt; и &lt;/script&gt; говорят браузеру о начале и окончании кода JavaScript соответственно.\r\n</p>\r\n<p>Рассмотрим следующий пример:\r\n</p>\r\n\r\n<pre>\r\n&lt;html&gt;\r\n&lt;head&gt;\r\n&lt;title&gt;My Javascript Page&lt;/title&gt;\r\n&lt;/head&gt;\r\n\r\n&lt;body&gt;\r\n&lt;script type="text/javascript"&gt;\r\nalert("Добро пожаловать!");\r\n&lt;/script&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n</pre>\r\n\r\n<p>Слово "alert" - это стандартная команда в языке JavaScript, которая вызывает появление на экране окошка с оповещением. Посетителю нужно будет нажать на кнопку "ОK" для продолжения.\r\n</p>\r\n<p>Введя команду alert между тэгами &lt;script type="text/javascript"&gt; и &lt;/script&gt;, мы даем понять браузеру, что это команда языка JavaScript.\r\n</p>\r\n<p>Если мы не введем тэги &lt;script&gt;, браузер будет считать эту команду за простой текст, и просто выведет ее на экран.\r\n</p>\r\n<p>Вставлять JavaScript можно как в секции &lt;head&gt;, так и в секции &lt;body&gt; html-документа. В общем случае, однако, предпочтительнее большую часть javascript-кода держать в секции &lt;head&gt;.\r\n</p>\r\n\r\n<p><strong>Первый сценарий\r\n</strong></p>\r\n<p>Знание о том, что javascript располагается между тэгами &lt;script&gt; - это начало. Есть еще несколько вещей, которые необходимо знать до того, как написать свой первый javascript-сценарий:\r\n</p>\r\n<p><em>- JavaScript строки заканчиваются точкой с запятой\r\n</em></p>\r\n<p>Вы могли заметить в предыдущем примере то, что строка JavaScript заканчивается точкой с запятой.<br />\r\nВы можете запросто поместить весь ваш javascript-код в одну строку без нарушения его работы.<br />\r\nОднако вы сильно затрудните самому себе восприятие кода, поэтому такой подход нежелателен.</p>\r\n\r\n<p><em>- Всегда помещайте текст в ""\r\n</em></p>\r\n<p>Когда вы вводите текст, который будет обрабатываться javascript, вы всегда должны вводить его внутри двойных кавычек.<br />\r\nЕсли вы забыли заключить текст в  "", то javascript будет интерпретировать ваш текст как переменную, а не как текст, а это не то, что нам нужно.</p>\r\n\r\n<p><em>- Верхний регистр и нижний регистр - это разные вещи\r\n</em></p>\r\n<p>Всегда помните о том, что в javascript регистр имеет значение.<br />\r\nЭто значит, что при написании сценариев вы должны использовать Большие буквы только в нужных местах, и нигде более.<br />\r\nНеверное использование капитализации - вероятно, одна из наиболее типичных ошибок для разработчиков JavaScript!</p>\r\n\r\n\r\n<p>Давайте рассмотрим следующий пример:\r\n</p>\r\n<p>Вместо того, чтобы выводить сообщение в popup-окне, как в предыдущем примере, мы можем просто вывести эту фразу непосредственно в тело документа.\r\n</p>\r\n<pre>\r\n&lt;html&gt;\r\n&lt;head&gt;\r\n&lt;title&gt;My Javascript Page&lt;/title&gt;\r\n&lt;/head&gt;\r\n\r\n&lt;body&gt;\r\n&lt;script&gt;\r\ndocument.write("Добро пожаловать!");\r\n&lt;/script&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n</pre>\r\n\r\n\r\n<p>Команда <em>document.write</em> говорит браузеру о том, что содержимое в скобках после данной команды должно быть выведено в документ. Не забывайте о том, что этот текст указывается в двойных кавычках.\r\n</p>\r\n<p>Сценарий из примера выше выведет на странице следующее:\r\n</p>\r\n<pre>\r\nДобро пожаловать!\r\n</pre>\r\n\r\n<p>Рассмотрим еще один пример, чтобы понять, где javascript выводит текст:\r\n</p>\r\n<pre>\r\n&lt;html&gt;\r\n&lt;head&gt;\r\n&lt;title&gt;My Javascript Page&lt;/title&gt;\r\n&lt;/head&gt;\r\n\r\n&lt;body&gt;\r\nHello!!!&lt;br&gt;\r\n&lt;script&gt;\r\ndocument.write("Добро пожаловать!&lt;br&gt;");\r\n&lt;/script&gt;\r\nEnjoy your stay...&lt;br&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n</pre>\r\n\r\n\r\n<p>На экран будет выведено следующее:\r\n</p>\r\n\r\n<pre>\r\nHello!!!\r\nДобро пожаловать!\r\nEnjoy your stay...\r\n</pre>\r\n\r\n<p>Как видите, javascript просто выводит текст в том месте, где расположен javascript-код в HTML-коде.\r\n</p>\r\n<p>Интересно то, что вы можете "писать" с помощью команды <em>document.write</em> в том числе и любые HTML-тэги.\r\n</p>\r\n<p>Например, если вам нужно сделать длинную таблицу со сравнительными значениями температуры в градусах по Цельсию и по Фаренгейту, вместо того, чтобы набирать в таблице все значения, можно было бы их автоматически высчитывать средствами JavaScript и выводить таблицу в документ.\r\n</p>\r\n\r\n<p><strong>Заглавные буквы\r\n</strong></p>\r\n<p>Очень важно понимать, что javascript - регистрозависимый язык, в нем различаются буквы в нижнем и верхнем регистрах.\r\n</p>\r\n<p>JavaScript будет считать переменные <em>myvalue</em> и <em>MYVALUE</em> разными переменными.\r\n</p>\r\n<p>Рассмотрим такие примеры:\r\n</p>\r\n<p>Пример 1. </p>\r\n\r\n<pre>\r\n&lt;html&gt;\r\n&lt;head&gt;\r\n&lt;title&gt;My Page&lt;/title&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n&lt;script&gt;\r\nmyvalue=2;\r\nmyvalue=5;\r\nresult=myvalue+myvalue;\r\ndocument.write(result);\r\n&lt;/script&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n</pre>\r\n\r\n<p>Пример 2.\r\n</p>\r\n\r\n<pre>\r\n&lt;html&gt;\r\n&lt;head&gt;\r\n&lt;title&gt;My Page&lt;/title&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n&lt;script&gt;\r\nmyvalue=2;\r\nMyValue=5;\r\nresult=myvalue+MyValue;\r\ndocument.write(result);\r\n&lt;/script&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n</pre>\r\n\r\n<p>Первый пример даст нам 10 (5+5).<br />\r\nПервый пример даст нам 7 (2+5).</p>\r\n\r\n<p>Поэтому хороший совет - используйте единообразный синтаксис для всех переменных.\r\n</p>\r\n<p>Пишите переменные или полностью в нижнем регистре (variable), или с первой заглавной буквой (Variable), или полностью в верхнем регистре (VARIABLE).\r\n</p>\r\n<p>Неважно, какой вариант вы выберете. Главное - придерживайтесь только его!\r\n</p>\r\n\r\n<p>По материалам <a target = "_blank" href="http://www.echoecho.com">www.echoecho.com</a><br>\r\nПеревод - Дмитрий Науменко</p>', 'Антон Гудков', 'articles', '', '', '', '', 'http://localhost/ci/img/05_2010/06/javascript_osnovy1.jpg', 1, '2016-09-23 19:28:54'),
(6, '10 принципов мастеров PHP', 'мастер php, советы php-разработчикам', '10 принципов мастеров PHP', 'Данный материал содержит мнения мастеров PHP-разработки по самым разным вопросам. Каждый из них является профессионалом в своей области и делится с нами частью своего знания этого языка.', '<p><strong>1. Используйте PHP только тогда, когда это действительно необходимо – Расмус Лердорф\r\n</strong></p>\r\n<p>Расмус Лердорф создал PHP в 1995 году и, с тех пор язык распространился в среде веб-разработчиков как лесной пожар, меняя облик Интернет. Расмус, однако, не создавал PHP именно для этой цели. Язык PHP создавался не для решения задач веб-разработки.\r\n</p>\r\n<p>Нельзя средствами PHP реализовать все, что угодно. Лердорф - первый, кто скажет вам о том, что PHP - просто один из инструментов в вашем арсенале, что даже PHP имеет свои ограничения.\r\n</p>\r\n<p><em>"Используйте для работы нужные инструменты. Я встречал компании, которые с головой ушли в PHP, применяя его где ни попадя, но PHP никогда не был языком, подходящим для решения любой проблемы. Наиболее подходящая для него ниша - использование в качестве "интерфейсного" скриптового языка для Web".\r\n</em></p>\r\n\r\n<p>Попытки использовать PHP для всего подряд неэффективны и, конечно, это не лучший способ применения вашего времени как веб-разработчика. Не бойтесь использовать другие языки, если PHP не удовлетворяем вашим нуждам, не подходит для конкретного проекта.\r\n</p>\r\n\r\n<p><strong>2. Используйте много таблиц в связке "PHP+MySQL" для повышения масштабируемости – Matt Mullenweg\r\n</strong></p>\r\n<p>Никому не нужно объяснять, каков его авторитет в среде PHP-разработчиков. Он, вместе с сообществом разработал самую популярную на сегодняшний день систему для ведения блогов - Wordpress. После создания движка, Matt и его помощники запустили wordpress.com - бесплатный сайт для блоггинга. На момент написания материала на wordpress.com размещены более 4 миллионов блогов, а их пользователи пишут по 140 тысяч постов ежедневно.\r\n</p>\r\n<p>Если кто и знает, как масштабировать вебсайт, то это Matt Mullenweg. В 2006 Matt поднял завесу тайны над структурой базы данных в Wordpress и объяснил, почему Wordpress MU (многопользовательский) использует отдельные таблицы MySQL под каждый блог вместо того, чтобы использовать одну огромную "монолитную" таблицу для всех блогов.\r\n</p>\r\n<p><em>"Мы тестировали такой подход для многопользовательской системы, но сочли, что его масштабируемость начиная с определенного момента потребует слишком высоких затрат. С монолитной структурой вы упираетесь в технические ограничения вашего "железа". В текущем же варианте пользователи разделены и могут быть легко разведены по разным группам, к примеру на WordPress.com пользователи разделены между 4096 базами данных, что позволяет производить масштабирование очень дешево и эффективно даже при наличии сотен тысяч и миллионов пользователей, при высоком уровне траффика."\r\n</em></p>\r\n<p>Возможность переноса таблиц позволяет коду и, в конечном счете, блогам, работать намного быстрее и легче масштабироваться. Умело используя кэширование и базы данных, Matt показал, что чрезвычайно популярные сайты вроде Facebook и WordPress.com могут работать на PHP и успешно справляться с невероятным потоком траффика.\r\n</p>\r\n\r\n<p><strong>3. Никогда не доверяйте своим пользователям – Dave Child\r\n</strong></p>\r\n<p>Dave Child - создатель сайта Added Bytes, частью содержимого которого являются великолепные "шпаргалки" по многим языкам программирования. Dave работал во многих компаниях-разработчиках в Великобритании и стал известен и авторитетен в среде программистов.\r\n</p>\r\n<p>Dave предлагает вам и некоторые мудрые советы для написания безопасного кода на PHP: не доверяйте вашим пользователям. Они могут вас огорчить.\r\n</p>\r\n<p><em>"Итак, наиболее важное правило веб-разработки, значение которого трудно переоценить: Никогда не доверяйте вашим пользователям. Исходите из допущения, что любая информация, передающаяся от пользователя содержит вредоносный код. Всегда. Это распространяется и на те случаи, когда вы считаете, что провели валидация на стороне клиента, скажем средствами JavaScript. Если вы справитесь с этим - считайте, что вы взяли хороший старт. Если для вас важна безопасность PHP-приложений, то самое важное для вас - применять это простое правило."\r\n</em></p>\r\n<p><em>"Будьте окончательным и бесповоротным параноиком.<br />\r\nЕсли вы будете исходить из предположения, что ваш сайт никогда не будет подвергаться атакам, либо иным проблемам подобного рода, то в случае, если это действительно произойдет, вы столкнетесь с большими трудностями. С другой стороны, если вы исходите из того, что каждый посетитель сайта хочет нанести вам ущерб, и вы с ним в состоянии "войны", то это поможет вам сделать сайт куда более защищенным и быть готовым к тому, что дела могут пойти не лучшим образом."</em></p>\r\n\r\n\r\n<p><strong>4. Делайте ставку на PHP-кэширование – Ben Balbo\r\n</strong></p>\r\n<p>Ben Balbo писал для Site Point - очень уважаемого учебного сайта для веб-разработчиков и дизайнеров. Он состоит в комитетах Melbourne PHP User Group и Open Source Developers’ Club и он знает кое-что об этом языке. Неудивительно, учитывая его прошлое, связанное с PHP-разработкой и проведением тренингов в данной области и то, что он предлагает вдумчиво использовать кэширование.\r\n</p>\r\n<p><em>"Если у вас есть нагруженный ресурс с преимущественно статическим контентом, например, блог, управляемый с помощью CMS, потребуется небольшая переделка, но в результате вы получите огромный прирост в производительности при небольших временных затратах. Установка кэширования для более сложных сайтов, которые генерируют различный контент для различных пользователей (например, порталы) потребует большего мастерства и временных затрат, но преимущества очевидны и в этом случае."\r\n</em></p>\r\n<p>Существует много способов кэширования в PHP:\r\n</p>\r\n<p>- кэширование вызовов функций<br />\r\n- работа с http-заголовками<br />\r\n- кэширование загрузки файлов в IE<br />\r\n- кэширование шаблонов<br />\r\n\r\nи многие другие. Из-за природы динамических языков вроде PHP, кэширование очень важно для хранения той информации на странице, к которой часто обращаются и которая редко изменяется.</p>\r\n\r\n\r\n<p><strong>5. Ускоряйте разработку на PHP, используя IDE (интегрированную среду разработки), шаблоны и сниппеты – Chad Kieffer\r\n</strong></p>\r\n<p>Когда Chad не занят работой над пользовательскими интерфейсами или администрированием баз данных, он дает экспертные советы со своего блога. Его кругозор очень широк и он часто видит более полную картину, которую не видят другие программисты, особенно когда дело доходит до глобального подхода, который Chad использует при разработке веб-сайтов. Он специализируется на всех аспектах разработки, поэтому любые идеи, возникающие у него при использовании такого подхода, могут оказаться весьма полезными.\r\n</p>\r\n<p>Chad уверен, что использование IDE вроде Eclipse PDT (Eclipse’s PHP development package - набор Eclipse для PHP-разработки) с применением шаблонов и сниппетов может значительно ускорить процесс разработки проекта.\r\n</p>\r\n<p>"Плотный график, огромные списки "to do" и дедлайны усложняют разработчикам жизнь, не позволяя им ознакомиться с продвинутыми функциями программ, в которых они работают. Это ужасно, поскольку некоторые возможности, вроде шаблонов в Eclipse, могут существенно снизить время кодирования и количество ошибок."\r\n</p>\r\n<p>Здравый смысл говорит о том, что если вы сумеете автоматизировать выполнение задачи, вы завершите проект быстрее. Потратив время на создание шаблонов, которые вы будете использовать снова и снова, вы сэкономите уйму времени при работе с повторяющимися блоками кода.\r\n</p>\r\n<p>Используя IDE вроде Eclipse и набор Eclipse для PHP-разработки, вы обнаружите, что постепенно время, затрачиваемое вами на разработку уменьшается. IDE будет автоматически закрывать парные скобки, вы забудете, что такое пропущенная точка с запятой, вы даже сможете отлаживать код в редакторе, без загрузки файлов на сервер.\r\n</p>\r\n\r\n<p><strong>6. Лучше используйте функции фильтрации в PHP – Joey Sochacki\r\n</strong></p>\r\n<p>Хотя имя Joey Sochacki и не столь известно в среде PHP-разработчиков, как имя Matt Mullenweg, он является очень опытным веб-разработчиком и делится опытом, накопленным в процессе работы в своем блоге Devolio.\r\n</p>\r\n<p>Joey обнаружил, что даже учитывая тот факт, что в PHP-коде должно быть множество различных проверок, далеко не все программисты используют функции фильтрации в PHP.\r\n</p>\r\n<p><em>"Фильтрация данных. Всем нам приходится делать это. Большинство, если не все из нас терпеть не могут этого делать. Однако, есть известные немногим функции фильтрации в PHP, которые позволяют нам выполнять любые типы проверок и валидаций. Используя эти функции, мы может производить валидацию и подготовку различных типов данных, адресов url, e-mail и IP-адресов, удалять опасные символы и т.д. с относительной легкостью."\r\n</em></p>\r\n<p>Фильтрация может быть достаточно замысловатой, но с помощью Joey вы научитесь фильтровать практически все, что угодно, и использовать все преимущества фильтрации средствами PHP.\r\n</p>\r\n\r\n<p><strong>7. Используйте PHP-фреймворк – Josh Sharp\r\n</strong></p>\r\n<p>Всегда велись дебаты относительно того, использовать ли PHP-фреймворк вроде Zend, CakePHP, CodeIgniter, либо вообще не использовать их. У каждого из них есть свои достоинства и недостатки, и многие разработчики имеют на этот счет свое мнение.\r\n</p>\r\n<p>Josh Sharp - веб-разработчик, который зарабатывает себе на хлеб с маслом создание сайтов для клиентов. Вот почему есть смысл поверить ему, когда он говорит о том, что использовать фреймворк - отличная идея, так как он помогает экономить время и избегать ошибок при программировании. Почему? Josh уверен, что из-за того, что PHP очень просто научиться.\r\n</p>\r\n<p><em>"Однако легкость освоения PHP - слабость данного языка. Так как практически нет ограничений на структуру кода, то очень легко написать плохой код. Но есть выход - используйте фреймворк.\r\n</em></p>\r\n<p>PHP-фреймворки помогают стандартизировать ваше приложение, и вы можете сэкономить уйму времени при работе над проектом.\r\n</p>\r\n\r\n<p><strong>8. Не используйте PHP-фреймворк – Расмус Лердорф\r\n</strong></p>\r\n<p>В противовес Josh Sharp Расмус, создатель PHP не считает, что фреймворки так уж хороши. Почему? Потому что они работают намного медленнее, чем "чистый" PHP.\r\n</p>\r\n<p>Во время презентации на Drupalcon 2008 Расмус сравнивал скорость ответа страницы на PHP с типичным "Hello World" в случае использования чистого PHP и ряда фреймворков. Результаты показали, что фреймворки оказались намного медленнее, чем простой код PHP.\r\n</p>\r\n\r\n<p>Если вкратце, то Расмус говорит о том, что наибольшая разница в производительности возникает при попытках использовать PHP-фреймворк как альтернативу простому PHP.\r\n</p>\r\n<p>[Замечание: Если вам все же нужно использовать фреймворк, то Расмусу больше всего нравится CodeIgniter, так как он, по словам Расмуса "меньше всего похож на фреймворк"]\r\n</p>\r\n\r\n<p><strong>9. Используйте пакетную обработку – Jack D. Herrington\r\n</strong></p>\r\n<p>Jack Herrington - не чужак в мире PHP и веб-разработки. Он автор более 30 статей для престижного сайта IBM developerWorks. Jack также публиковал книги по тематике программирования, вроде "PHP-хаки". Jack - добротный специалист.\r\n</p>\r\n<p>Jack D. Herrington  рекомендует использовать пакетную обработку и крон для решения тех задач, которые могут быть решены в фоновом режиме. Пользователи в сети не хотят ждать долго. Есть некоторые задачи, решение которых занимает немало времени и их можно производить в фоновом режиме.\r\n</p>\r\n<p>Конечно, в отдельных случаях немного проще выделить вспомогательный потока для выполнения небольшой задачи. Но легко увидеть и то, что с помощью обычных инструментов - крона, MySQL, обычного объектно-ориентированного программирования и Pear::DB создание пакетных задач в приложениях на PHP просто реализуется, просто развертывается и просто обслуживается.\r\n</p>\r\n<p><em>"Я использовал оба подхода и я думаю, что крон обладает преимуществом "Keep It Simple, Stupid" (KISS) - "Делай проще, тупица". Он делает обработку в фоне очень простой. Вместо того, чтобы происходило постоянное выполнение нескольких задач в разных потоках, у вас есть простой скрипт, который запускается кроном. Скрипт проверяет, нужно ли что-нибудь выполнять. Если нужно - выполняет и завершается. Нет необходимости беспокоиться об утечках памяти. Не надо волноваться о срывах выполнения процесса и опасности попасть в бесконечный цикл."\r\n</em></p>\r\n\r\n\r\n<p><strong>10. Немедленно включите Error Reporting – David Cummings\r\n</strong></p>\r\n<p>David Cummings руководит компанией, занимающейся разработкой CMS - систем управления контентом. Его компания завоевала несколько наград и если кто и знает, как разрабатывать PHP-приложения эффективно, то это David.\r\n</p>\r\n<p>David написал в статье на SitePoint о двух вещах в PHP, которые он хотел бы знать, когда только начинал. Одна из них: Включите error reporting немедленно. Это сэкономит вам в перспективе чертову уйму времени.\r\n</p>\r\n<p><em>"Это самая первая вещь, о которой я говорю людям, использующим PHP - выставить error reporting на отображение всех ошибок. Зачем? По умолчанию error reporting не установлена так, что вам не будут показываться многие, казалось бы, незначительные ошибки вроде:</em>\r\n</p>\r\n<p><em>- объявление переменной раньше времени,<br />\r\n- ссылка на недоступную в данной части кода переменную и др.</em></p>\r\n\r\n<p><em>Эти вещи могут показаться незначительными, пока вы не начнете разрабатывать большие объектно-ориентированные приложения с функциями и классами. Очень часто, когда вам показываются не все ошибки, вы убьете не один час, рыская по своим функциям, которые не работаю из-за неправильно написанного имени переменной или невозможности получить к ней доступ."\r\n</em></p>\r\n<p>Error reporting может значительно помочь вам в случае установки на отображение всех ошибок. Пожалейте волосы на вашей голове и свое драгоценное время - пусть ошибки ищет PHP, а не вы.\r\n</p>\r\n\r\n<p>По материалам <a target = "_blank" href = "http://net.tutsplus.com">www.net.tutsplus.com</a><br>\r\nПеревод - Дмитрий Науменко</p>', 'Антон Гудков', 'articles', 'php', '', '', '', 'http://localhost/ci/img/05_2010/08/php_master.jpg', 5, '2016-09-23 19:32:31');
INSERT INTO `materials` (`material_id`, `description`, `keywords`, `title`, `short_text`, `main_text`, `author`, `section0`, `section1`, `section2`, `section3`, `section4`, `small_img_url`, `count_views`, `date`) VALUES
(7, 'Основы JavaScript - часть 2', 'Основы JavaScript, применение javascript, javascript переменная', 'Основы JavaScript - часть 2', 'Во второй части по основам Javascript мы рассмотрим применение различного вида всплывающих окон.\r\nКроме того, разберем понятие переменной, рассмотрим, как работают переменные, как присваивать им значения, как сравнивать между собой и некоторые другие моменты. ', '<p><strong>Всплывающие окна (pop-up)\r\n</strong></p>\r\n<p>Различают три вида всплывающих окон. Попробуйте их в действии, нажимая на кнопки ниже:\r\n</p>\r\n<table align="center" bgcolor="#F7F9FC" border="1"><tbody><tr><td bgcolor="#F7F9FC"><br>&nbsp;&nbsp;&nbsp;&nbsp;<input value="alert box" name="B1" onclick="alert(''Это окно типа Alert'')" type="button">&nbsp;&nbsp; <input value="confirm box" name="B2" onclick="confirm(''Окна типа Confirm предлагают пользователю выбор - OK или Отмена'')" type="button">&nbsp;&nbsp; <input value="prompt box" name="B3" onclick="prompt(''Окна типа Prompt позволяют пользователю ввести в поле какой-либо текст или значение'',''Введите здесь ваш текст'')" type="button">&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;</td></tr></tbody></table>\r\n\r\n\r\n<p><strong>Окно типа "Alert"\r\n</strong></p>\r\n<p>Синтаксис для такого окна очень прост:\r\n</p>\r\n\r\n<pre>\r\nalert("Ваш текст");\r\n</pre>\r\n\r\n<p>Пользователю нужно будет нажать "ОК" для продолжения.\r\n</p>\r\n<p>Типичный случай использования - когда необходимо донести до пользователя какую-либо информацию. Это могут быть любые сообщения, в том числе и достаточно распространенные, вроде "Для корректного отображения всех элементов сайта необходим Flash-плагин" и т.п.\r\n</p>\r\n\r\n<p><strong>Окно типа "Confirm"\r\n</strong></p>\r\n<p>Синтаксис для данного типа окон:\r\n</p>\r\n<pre>\r\nconfirm("Ваш текст");\r\n</pre>\r\n\r\n<p>Для продолжения пользователю нужно нажать "ОК" или "Отмена".\r\n</p>\r\n<p>Типичный случай использования - попросить пользователя что-то подтвердить или принять.\r\n</p>\r\n<p>Например, "Подтвердите, что вам как минимум 57 лет", или что-нибудь техническое, вроде "У вас установлен плагин Shockwave Flash?"\r\n</p>\r\n<p>- Если пользователь кликает на "ОК", сценарий возвращает значение true (истина).<br />\r\n- Если пользователь кликает на "Отмена", то возвращается значение false (ложь).</p>\r\n\r\n<pre>\r\nif (confirm("Вы согласны?")) {alert("Вы согласились")}\r\nelse{alert ("Вы не согласились")};\r\n</pre>\r\n\r\n<p><strong>Окно типа "Prompt"\r\n</strong></p>\r\n<p>Синтаксис данного типа окна следующий:\r\n</p>\r\n<pre>\r\nprompt("Ваш текст","Значение по умолчанию");\r\n</pre>\r\n\r\n<p>Пользователю для продолжения нужно кликнуть на "ОК" или "Отмена" после ввода текста.\r\n</p>\r\n<p>Типичный пример использования - случаи, когда пользователю нужно ввести какое-либо значение в поле для того, чтобы загрузилась определенная страница.\r\n</p>\r\n<p>Например, это может быть имя пользователя, которое сохранится в <a href="http://www.codeharmony.ru/materials/4">Cookie</a>, либо ввод пароля или иного кода.\r\n</p>\r\n\r\n<p>- Если пользователь нажимает "ОК", сценарий возвращает то, что было введено пользователем.<br>\r\n- Если пользователь нажимает "Отмена", то возвращается <em>null</em>.</p>\r\n\r\n<p>Так как обычно есть необходимость в дальнейшем использовании текста, набранного пользователем, мы можем занести этот текст в переменную, как показано в примере ниже:\r\n</p>\r\n<pre>\r\nusername=prompt("Пожалуйста, введите Ваше имя","Ваше имя");\r\n</pre>\r\n\r\n<p><strong>Переменные\r\n</strong></p>\r\n<p>Переменные можно сравнить с небольшими коробочками с именами.\r\n</p>\r\n<p>Если вам нужно хранить 5 пар обуви у вас, скорее всего, есть для этого пять коробок. На каждой коробке вы бы написали, что за пара в ней лежит.\r\n</p>\r\n<p>- Коробки будут вашими переменными - местом хранения вещей.\r\n</p>\r\n<p>- Названия коробок будут вашими именами переменных - те самые, которые вы используете "ссылаясь" на каждую из коробок.\r\n</p>\r\n<p>- Сами же пары обуви будут содержимым переменной - тем, что хранится в коробке.\r\n</p>\r\n<p><strong>Переменная</strong> - это просто "кусочек" компьютерной памяти, где хранится определенная информация. К переменным нужно обращаться, используя уникальные имена, которые мы сами им и задаем.\r\n</p>\r\n\r\n<p>Рассмотрим пример:\r\n</p>\r\n<pre>\r\n&lt;html&gt;\r\n&lt;head&gt;\r\n&lt;title&gt;My Javascript Page&lt;/title&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n\r\n&lt;script&gt;\r\nmyname="Петр Петрович";\r\ndocument.write(myname);\r\n&lt;/script&gt;\r\n\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n</pre>\r\n\r\n<p>Данный пример выполнит вывод в документ слов "Петр Петрович".\r\n</p>\r\n<p>Заметьте, что если вы хотите сохранить текст в переменной, необходимо заключить его в "". Это делается для того, чтобы javascript мог отличить текст от переменной.\r\n</p>\r\n\r\n<p>Рассмотрим пример ниже, чтобы понять важность этого правила:\r\n</p>\r\n<pre>\r\n&lt;html&gt;\r\n&lt;head&gt;\r\n&lt;title&gt;My Javascript Page&lt;/title&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n\r\n&lt;script&gt;\r\nHenrik="Мое имя";\r\nmyname=Henrik;\r\ndocument.write(myname);\r\n&lt;/script&gt;\r\n\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n</pre>\r\n\r\n<p>Попытайтесь предсказать результат выполнения данного кода прежде чем читать дальше.\r\n</p>\r\n<p>- В первой строке скрипта текст "Мое имя" сохраняется в переменную <em>Henrik</em>.\r\n</p>\r\n<p>- Во второй строке переменная Henrik сохраняется в переменную <em>myname</em>.\r\n</p>\r\n<p>- Наконец, в третьей строке переменная <em>myname</em> выводится в документ.\r\n</p>\r\n<p>Результатом работы сценария будет вывод на экран слов "Мое имя".\r\n</p>\r\n\r\n\r\n<p><strong>Присвоение значений переменным\r\n</strong></p>\r\n<p>Наиболее типичный способ присвоения переменной какого-либо значения - <strong>использование знака равенства</strong>.\r\n</p>\r\n<p>Рассмотрим следующие примеры, чтобы увидеть различные способы задания значений переменным. Особое внимание обратите на использование скобок, позволяющих управлять очередностью обработки информации в сложных формулах.\r\n</p>\r\n\r\n<table style = "margin-left:10px; font-family: Verdana, Tahoma; font-size: 12px;text-align: center;" width = "550" border = "2" cellspacing = "0" cellpadding = "6">\r\n\r\n<tr><td><strong>Пример</strong></td><td><strong>Результирующее значение</strong></td></tr>\r\n<tr><td>a=2;</td><td>a=2</td></tr>\r\n<tr><td>a=2; a++;</td><td>a=3 &nbsp;&nbsp;&nbsp;(2+1)</td></tr>\r\n<tr><td>a=2; a--;</td><td>a=1 &nbsp;&nbsp;&nbsp;(2-1)</td></tr>\r\n<tr><td>a=2; b=3; c=a+b;</td><td>c=5 &nbsp;&nbsp;&nbsp;(2+3)</td></tr>\r\n<tr><td>a=2; d=a+6;</td><td>d=8 &nbsp;&nbsp;&nbsp;(2+6)</td></tr>\r\n<tr><td>First="Henrik";</td><td>First=Henrik</td></tr>\r\n<tr><td>Last="Petersen";</td><td>Last=Petersen</td></tr>\r\n<tr><td>Full=First+" "+Last;</td><td>Full=Henrik Petersen</td></tr>\r\n<tr><td>a=2*7;</td><td>a=14 &nbsp;(2*7)</td></tr>\r\n<tr><td>b=20/5;</td><td>b=4 &nbsp;&nbsp;&nbsp;(20/5)</td></tr>\r\n<tr><td>c=(20/5)*2;</td><td>c=8 &nbsp;&nbsp;&nbsp;(4*2)</td></tr>\r\n<tr><td>d=20/(5*2);</td><td>d=2 &nbsp;&nbsp;&nbsp;(20/10)</td></tr>\r\n\r\n</table>\r\n\r\n\r\n<p><strong>Арифметические операторы\r\n</strong></p>\r\n<p>В таблице выше показаны так называемые "арифметические операторы" <em>a++</em> и <em>a--</em>.\r\n</p>\r\n<p>В принципе, вполне реально обходиться и без них, так как такого же эффекта можно добиться, используя другие операторы.\r\n</p>\r\n<p>Однако вы часто будете видеть их в скриптах и, возможно, сами станете настолько ленивы, что будете ими пользоваться - ведь написать <em>a++;</em> быстрее, чем <em>a=a+1;</em>.\r\n</p>\r\n\r\n<table style = "font-family: Verdana, Tahoma; font-size: 12px;text-align: center; margin-left:10px;" width = "550" border = "2" cellspacing = "0" cellpadding = "6">\r\n\r\n<tr><td><strong>Оператор</strong></td><td><strong>Объяснение</strong></td><td><strong>Пример</strong></td></tr>\r\n<tr><td>++</td><td>increment (инкремент)</td><td>a=5;<br>a++;<br>a теперь равно 6</td></tr>\r\n<tr><td>--</td><td>decrement (декремент)</td><td>a=5;<br>a--;<br>a теперь равно 4 </td></tr>\r\n<tr><td>%</td><td>возвращает остаток от деления двух чисел</td><td>a=8 % 3;<br>a теперь равно 2, так как при делении 8 на 3 в остатке будет 2</td></tr>\r\n\r\n</table>\r\n\r\n\r\n<p><strong>Сравнение переменных\r\n</strong></p>\r\n<p>Есть несколько способов сравнения переменных. Простейший из них - это <strong>сравнение на равенство</strong>, которое осуществляется с использованием двойного знака равенства:\r\n</p>\r\n<pre>\r\nif (a==b) {alert("a равно b")};\r\n\r\nif (lastname=="Petersen") {alert("Интересная фамилия!!!")};\r\n</pre>\r\n\r\n<p>Если вы забудете использовать двойной знак равенства и будете использовать одинарный при сравнении переменных на равенство, вы не сравните переменные. Все что произойдет - это присовоение переменной слева от знака равенства значения переменной справа от знака равенства.\r\n</p>\r\n<p>Пример подобной ошибки:\r\n</p>\r\n<pre>\r\nif (lastname="Petersen") {alert("Интересная фамилия!!!")};\r\n</pre>\r\n\r\n<p>Это очень часто встречающаяся ошибка, которая полностью нарушает работу скрипта.\r\n</p>\r\n<p>В таблице ниже представлены различные <strong>операторы сравнения</strong>.\r\n</p>\r\n<table style = "font-family: Verdana, Tahoma; font-size: 12px;text-align: center;margin-left:10px;" width = "550" border = "2" cellspacing = "0" cellpadding = "6">\r\n\r\n<tr><td><strong>Оператор</strong></td><td><strong>Объяснение</strong></td><td><strong>Пример</strong></td></tr>\r\n<tr><td>==</td><td>равно</td><td>4==5 (false)<br>5==5 (true)<br>5==4 (false)</td></tr>\r\n<tr><td>!=</td><td>не равно</td><td>4!=5 (true)<br>5!=5 (false)<br>5!=4 (true)</td></tr>\r\n<tr><td><</td><td>меньше</td><td>4<5 (true)<br>5<5 (false)<br>5<4 (false) </td></tr>\r\n<tr><td>></td><td>больше</td><td>4>5 (false)<br>5>5 (false)<br>5>4 (true) </td></tr>\r\n<tr><td><=</td><td>меньше или равно</td><td>4<=5 (true)<br>5<=5 (true)<br>5<=4 (false) </td></tr>\r\n<tr><td>>=</td><td>больше или равно</td><td>4>=5 (false)<br>5>=5 (true)<br>5>=4 (true) </td></tr>\r\n\r\n</table>\r\n<p>По материалам <a target = "_blank" href="http://www.echoecho.com">www.echoecho.com</a><br>\r\nПеревод - Дмитрий Науменко</p>\r\n', 'Антон Гудков', 'articles', '', '', '', '', 'http://localhost/ci/img/05_2010/11/javascript_osnovy2.jpg', 13, '2016-09-23 19:28:07');

-- --------------------------------------------------------

--
-- Структура таблицы `pages`
--

CREATE TABLE `pages` (
  `page_id` varchar(30) DEFAULT NULL,
  `description` varchar(200) DEFAULT NULL,
  `keywords` varchar(200) DEFAULT NULL,
  `title` varchar(200) DEFAULT NULL,
  `main_text` text
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Дамп данных таблицы `pages`
--

INSERT INTO `pages` (`page_id`, `description`, `keywords`, `title`, `main_text`) VALUES
('contact', 'Страница контактов', 'Антон Гудков', 'Связь со мной', '<p>Если у вас есть, что сказать, Вы можете воспользоваться формой ниже, чтобы отправить мне письмо.</p>');

-- --------------------------------------------------------

--
-- Структура таблицы `preferences`
--

CREATE TABLE `preferences` (
  `pref_id` varchar(100) DEFAULT NULL,
  `value` varchar(200) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Дамп данных таблицы `preferences`
--

INSERT INTO `preferences` (`pref_id`, `value`) VALUES
('user_per_page', '2'),
('admin_per_page', '3'),
('admin_login', 'login'),
('admin_pass', 'pass');

-- --------------------------------------------------------

--
-- Структура таблицы `sections`
--

CREATE TABLE `sections` (
  `section_id` varchar(30) DEFAULT NULL,
  `description` varchar(200) DEFAULT NULL,
  `keywords` varchar(200) DEFAULT NULL,
  `title` varchar(200) DEFAULT NULL,
  `main_text` text
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Дамп данных таблицы `sections`
--

INSERT INTO `sections` (`section_id`, `description`, `keywords`, `title`, `main_text`) VALUES
('articles', 'статьи по веб-разработке', 'веб-разработка, создание сайт', 'Статьи по веб-разработке', '<p>в данном разделе вы найдете статьи по веб разработке</p>'),
('html', 'материалы по html', 'html', 'Материалы по html', '<p>в данном разделе вы найдете материалы, посвященные языку html</p>'),
('php', 'материалы по php', 'php', 'Материалы по php', '<p>в данном разделе вы найдете материалы по языку php</p>'),
('css', 'материалы по css ', 'css', 'Материалы по css ', '<p>в данном разделе вы найдете материалы по языку css </p>');

--
-- Индексы сохранённых таблиц
--

--
-- Индексы таблицы `ci_sessions`
--
ALTER TABLE `ci_sessions`
  ADD PRIMARY KEY (`session_id`);

--
-- Индексы таблицы `comments`
--
ALTER TABLE `comments`
  ADD PRIMARY KEY (`comment_id`);

--
-- Индексы таблицы `materials`
--
ALTER TABLE `materials`
  ADD PRIMARY KEY (`material_id`);
ALTER TABLE `materials` ADD FULLTEXT KEY `main_text` (`main_text`);

--
-- AUTO_INCREMENT для сохранённых таблиц
--

--
-- AUTO_INCREMENT для таблицы `comments`
--
ALTER TABLE `comments`
  MODIFY `comment_id` int(6) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=5;
--
-- AUTO_INCREMENT для таблицы `materials`
--
ALTER TABLE `materials`
  MODIFY `material_id` int(6) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=8;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
